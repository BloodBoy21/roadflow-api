from fastapi import APIRouter, Depends, HTTPException
from models.inputs.agent import AgentProcess
from services.agents import AgentCaller
from loguru import logger

agents_router = APIRouter()


@agents_router.post("/process")
async def process_agent(data: AgentProcess):
    agent_caller = AgentCaller.create(org_id=data.org_id, agent=data.agent)
    if not agent_caller:
        logger.error(f"Agent {data.agent} not found for org_id {data.org_id}")
        raise HTTPException(
            status_code=400,
            detail=f"Agent {data.agent} not found for org_id {data.org_id}",
        )
    try:
        response = await agent_caller.generate(text=data.text)
        if not response:
            raise HTTPException(
                status_code=500,
                detail="No response generated by the agent.",
            )
        return {"response": response}
    except Exception as e:
        logger.error(f"Error processing agent: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Error processing agent: {str(e)}",
        ) from e
